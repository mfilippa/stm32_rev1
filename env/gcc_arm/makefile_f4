# ------------------------------------------------------------------------------
# makefile - MPF 04/2020
# ------------------------------------------------------------------------------

# compiler (add compiler to system path)
# Linux: export PATH=$PATH:/path_to_compiler/
# Windows: add to path
CC = arm-none-eabi-gcc

# compiler flags (comment to disable)
# .. verbose
# CFLAGS += -v
# .. C99 standard
CFLAGS += -std=c99
# .. optimizations: O, O0, O1, O2, O3, Os
CFLAGS += -Os
# .. all warnings
CFLAGS += -Wall -Wextra
# .. warn if floats are == or != compared
CFLAGS += -Wfloat-equal
# .. warn if anything depends on size of void
CFLAGS += -Wpointer-arith
# .. generate dependency files *.d
CFLAGS += -MMD -MP
# .. #define symbols
CFLAGS += -DSTM32F40_41xxx -DUSE_STDPERIPH_DRIVER
# .. paths to search for header files
CFLAGS += -I../../source/app
CFLAGS += -I../../source/hal
CFLAGS += -I../../source/lib
CFLAGS += -I../../source/hil/stm32f4
CFLAGS += -I../../source/hil/stm32f4/cmsis
CFLAGS += -I../../source/hil/stm32f4/driverlib_stm32f4_v1.8.0/inc

# linker flags
# .. path to libraries (for non standard libraries)
# LDFLAGS += -L./
# .. libraries to link: math.h
# LDLIBS += -lm

# Tools
OBJCOPY = arm-none-eabi-objcopy
OBJDUMP = arm-none-eabi-objdump

# ARM stuff - extracted from <gcc_arm_compiler>/samples folder
# .. core: 0/3/4/7
CORTEX_M=4
# link time optimizer: lto / no-lto
# VERY AGRESSIVE OPTIMIZATION... use with caution
# if using LTO, comment weak IRQ handlers in startup! LTO has a bug (?), 
# will not override weak definitions
LTO = lto
# .. NANO
# USE_NANO=--specs=nano.specs
# .. hosting
# USE_SEMIHOST=--specs=rdimon.specs
USE_NOHOST = --specs=nosys.specs
# .. architecture flags
ARCH_FLAGS = -mthumb -mcpu=cortex-m$(CORTEX_M) -mfloat-abi=hard
# .. do not change lines below
CORE = CM$(CORTEX_M)
STARTUP_DEFS = -D__STARTUP_CLEAR_BSS -D__START=main
GC = -Wl,--gc-sections
MAP = -Wl,-Map=$(OUTDIR)/$(EXEC).map
LDSCRIPTS = -L. -L./ldscripts -T stm32f415rg.ld
CFLAGS += $(ARCH_FLAGS) $(STARTUP_DEFS) -f$(LTO) -ffunction-sections -fdata-sections
LDFLAGS += $(USE_NANO) $(USE_NOHOST) $(LDSCRIPTS) $(GC) $(MAP)

# makefile paths to search for source files
VPATH += ../../source/app
VPATH += ../../source/lib
VPATH += ../../source/hil/stm32f4
VPATH += ../../source/hil/stm32f4/gcc_startup
VPATH += ../../source/hil/stm32f4/driverlib_stm32f4_v1.8.0/src

# executable name
EXEC = stm32f415rg

# object folder
OBJDIR = ./obj

# output folder
OUTDIR = ./out

# source files
SRC = app.c \
	sch.c \
	comm.c \
	main.c \
	io.c \
	sys.c \
	uart.c \
	error.c \
	pwm.c \
	adc.c \
	dac.c \
	system_stm32f4xx.c \
	stm32f4xx_gpio.c \
	stm32f4xx_usart.c \
	stm32f4xx_rcc.c \
	stm32f4xx_tim.c \
	stm32f4xx_adc.c \
	stm32f4xx_dma.c \
	stm32f4xx_dac.c \

# startup
ASSY = startup_ARM$(CORE).S

# to execute under windows/linux
ifdef OS
	FixPath = $(subst /,\,$1)
	MKDIROBJ = if not exist $(call FixPath,$(OBJDIR)) mkdir $(call FixPath,$(OBJDIR)) 
	MKDIROUT = if not exist $(call FixPath,$(OUTDIR)) mkdir $(call FixPath,$(OUTDIR)) 
	RM = del /Q
	EXT = .exe
else
	ifeq ($(shell uname), Linux)
		MKDIROBJ = mkdir -p $(OBJDIR)
		MKDIROUT = mkdir -p $(OUTDIR)
		RM = rm -f
		FixPath = $1
	endif
endif

# generate binary and disassembly
misc : $(OUTDIR)/$(EXEC).axf
	$(OBJCOPY) -O binary $(OUTDIR)/$(EXEC).axf $(OUTDIR)/$(EXEC).bin
	$(OBJDUMP) -D $(OUTDIR)/$(EXEC).axf > $(OUTDIR)/$(EXEC).assy

# build target - linker command
$(OUTDIR)/$(EXEC).axf : $(SRC:%.c=$(OBJDIR)/%.o) $(ASSY:%.S=$(OBJDIR)/%.o)
	$(MKDIROUT)
	$(CC) $(CFLAGS) $(LDFLAGS) -o $@ $^ $(LIBS)

# compile source files
$(OBJDIR)/%.o : %.c
	$(MKDIROBJ)
	$(CC) $(CFLAGS) -c $< -o $@

# compile assy files
$(OBJDIR)/%.o : %.S
	$(MKDIROBJ)
	$(CC) $(CFLAGS) -c $< -o $@

# auto dependencies - recompile if a header file changed
-include $(SRC:%.c=$(OBJDIR)/%.d)
-include $(ASSY:%.S=$(OBJDIR)/%.d)

# clean
.PHONY: clean 
clean :
	$(RM) $(call FixPath,$(OBJDIR)/*)
	$(RM) $(call FixPath,$(OUTDIR)/*)